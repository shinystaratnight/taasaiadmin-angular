{"version":3,"sources":["ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.service.ts","ng://ngx-intl-tel-input/lib/data/country-code.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.validator.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.component.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.module.ts"],"names":["NgxIntlTelInputService","Injectable","args","providedIn","CountryCode","this","allCountries","phoneNumberValidator","control","number","error","validatePhoneNumber","valid","lpn.PhoneNumberUtil","getInstance","parse","value","countryCode","e","isValidNumberForRegion","Éµ0","NgxIntlTelInputComponent","countryCodeData","preferredCountries","enablePlaceholder","cssClass","onlyCountries","enableAutoCountrySelect","phoneNumber","preferredCountriesInDropDown","phoneUtil","disabled","errors","onTouched","propagateChange","_","fetchCountryData","prototype","ngOnInit","_this","length","forEach","iso2","preferredCountry","filter","c","push","includes","selectedCountry","onPhoneNumberChange","toUpperCase","getCountryCode","getCountryIsoCode","newCountry","find","internationalNumber","format","lpn.PhoneNumberFormat","INTERNATIONAL","nationalNumber","NATIONAL","onCountrySelect","country","el","focus","onInputKeyPress","event","inputChar","String","fromCharCode","charCode","test","preventDefault","name","toString","dialCode","priority","areaCodes","undefined","flagClass","toLocaleLowerCase","placeHolder","getPhoneNumberPlaceHolder","getExampleNumber","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","obj","setTimeout","rawNumber","values_","countries","mainCountry","secondaryCountries","matchedCountry","areaCode","startsWith","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","useValue","Input","NgxIntlTelInputModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","BsDropdownModule","exports"],"mappings":"ugBAAA,IAAAA,EAAA,WAOC,SAAAA,gCALAC,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,sJAHb,GCAAC,EAAA,SAAAA,IACQC,KAAAC,aAAe,CACrB,CACC,6BACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,iBACA,KACA,QAED,CACC,UACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,sBACA,KACA,QAED,CACC,YACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,YACA,KACA,KACA,GAED,CACC,uBACA,KACA,MAED,CACC,0BACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,uBACA,KACA,OAED,CACC,wBACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,qBACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,SACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,iBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,+CACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,kBACA,KACA,MAED,CACC,iCACA,KACA,OAED,CACC,yBACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,SACA,KACA,IACA,EACA,CACC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,QAGrC,CACC,0BACA,KACA,OAED,CACC,wBACA,KACA,MACA,GAED,CACC,iBACA,KACA,QAED,CACC,uDACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,QACA,KACA,MAED,CACC,aACA,KACA,MAED,CACC,mBACA,KACA,KACA,GAED,CACC,0BACA,KACA,KACA,GAED,CACC,WACA,KACA,MAED,CACC,yBACA,KACA,OAED,CACC,iDACA,KACA,OAED,CACC,uCACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,OACA,KACA,MAED,CACC,UACA,KACA,MACA,GAED,CACC,kBACA,KACA,OAED,CACC,mCACA,KACA,OAED,CACC,oBACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,4CACA,KACA,IACA,EACA,CAAC,MAAO,MAAO,QAEhB,CACC,UACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,cACA,KACA,OAED,CACC,wCACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,oCACA,KACA,OAED,CACC,0BACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,kBACA,KACA,MACA,GAED,CACC,SACA,KACA,MAED,CACC,mCACA,KACA,OAED,CACC,yCACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,wBACA,KACA,MAED,CACC,gBACA,KACA,OAED,CACC,YACA,KACA,OAED,CACC,kBACA,KACA,MAED,CACC,+BACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,aACA,KACA,MACA,GAED,CACC,OACA,KACA,QAED,CACC,YACA,KACA,OAED,CACC,WACA,KACA,KACA,GAED,CACC,kBACA,KACA,OAED,CACC,+BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,iBACA,KACA,OAED,CACC,yBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,eACA,KACA,MAED,CACC,YACA,KACA,MAED,CACC,kBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,cACA,KACA,KACA,GAED,CACC,oBACA,KACA,OAED,CACC,iBACA,KACA,KACA,GAED,CACC,UACA,KACA,QAED,CACC,aACA,KACA,MAED,CACC,SACA,KACA,KACA,GAED,CACC,qBACA,KACA,OAED,CACC,yBACA,KACA,IACA,GAED,CACC,QACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,0BACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,iCACA,KACA,OAED,CACC,4BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,4BACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,UACA,KACA,MACA,GAED,CACC,kBACA,KACA,MAED,CACC,aACA,KACA,OAED,CACC,8BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,yBACA,KACA,OAED,CACC,aACA,KACA,QAED,CACC,sBACA,KACA,MACA,GAED,CACC,0BACA,KACA,OAED,CACC,2BACA,KACA,MAED,CACC,oBACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,0BACA,KACA,MAED,CACC,qCACA,KACA,OAED,CACC,cACA,KACA,MAED,CACC,YACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,iBACA,KACA,OAED,CACC,+BACA,KACA,OAED,CACC,2BACA,KACA,QAED,CACC,iBACA,KACA,KACA,GAED,CACC,kBACA,KACA,OAED,CACC,wBACA,KACA,MAED,CACC,QACA,KACA,OAED,CACC,wBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,cACA,KACA,MAED,CACC,cACA,KACA,MAED,CACC,kBACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,cACA,KACA,IACA,EACA,CAAC,MAAO,QAET,CACC,iBACA,KACA,OAED,CACC,uBACA,KACA,MACA,GAED,CACC,oBACA,KACA,MAED,CACC,kBACA,KACA,IACA,GAED,CACC,SACA,KACA,OAED,CACC,sCACA,KACA,MACA,GAED,CACC,eACA,KACA,OAED,CACC,wBACA,KACA,QAED,CACC,cACA,KACA,QAED,CACC,iDACA,KACA,MACA,GAED,CACC,uDACA,KACA,OAED,CACC,mCACA,KACA,QAED,CACC,QACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,8CACA,KACA,OAED,CACC,6CACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,YACA,KACA,MAED,CACC,eACA,KACA,QAED,CACC,uBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,eACA,KACA,MAED,CACC,qBACA,KACA,MAED,CACC,gCACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,0BACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,yBACA,KACA,KACA,GAED,CACC,YACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,wBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,cACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,cACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,sBACA,KACA,QAED,CACC,oBACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,eACA,KACA,OAED,CACC,2BACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,sBACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,qDACA,KACA,OAED,CACC,iBACA,KACA,KACA,GAED,CACC,gBACA,KACA,IACA,GAED,CACC,UACA,KACA,OAED,CACC,2BACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,oCACA,KACA,KACA,GAED,CACC,YACA,KACA,MAED,CACC,qBACA,KACA,MAED,CACC,oBACA,KACA,OAED,CACC,sCACA,KACA,MACA,GAED,CACC,mBACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,gBACA,KACA,MACA,KChuCUC,EAAuB,SAACC,OAGhCC,EAFEC,EAAQ,CAAEC,oBAAqB,CAAEC,OAAO,IAG9C,IACCH,EAASI,EAAAA,gBAAoBC,cAAcC,MAAMP,EAAQQ,MAAMP,OAAQD,EAAQQ,MAAMC,aACpF,MAAOC,GACR,OAAOR,EAGR,OAAKD,GAGCI,EAAAA,gBAAoBC,cAAcK,uBAAuBV,EAAQD,EAAQQ,MAAMC,kBAApF,EAFOP,GCdTU,EAqBab,EAdbc,EAAA,WAwCC,SAAAA,EACSC,GAAAjB,KAAAiB,gBAAAA,EApBAjB,KAAAW,MAAQ,GACRX,KAAAkB,mBAAoC,GACpClB,KAAAmB,mBAAoB,EACpBnB,KAAAoB,SAAW,eACXpB,KAAAqB,cAA+B,GAC/BrB,KAAAsB,yBAA0B,EAEnCtB,KAAAuB,YAAc,GACdvB,KAAAC,aAA+B,GAC/BD,KAAAwB,6BAA+C,GAE/CxB,KAAAyB,UAAYjB,EAAAA,gBAAoBC,cAChCT,KAAA0B,UAAW,EACX1B,KAAA2B,OAAqB,CAAC,6BAGtB3B,KAAA4B,UAAY,aACZ5B,KAAA6B,gBAAkB,SAACC,KAKlB9B,KAAK+B,mBAiKP,OA9JCf,EAAAgB,UAAAC,SAAA,WAAA,IAAAC,EAAAlC,KACKA,KAAKkB,mBAAmBiB,QAC3BnC,KAAKkB,mBAAmBkB,QAAQ,SAAAC,OACzBC,EAAmBJ,EAAKjC,aAAasC,OAAO,SAACC,GAClD,OAAOA,EAAEH,OAASA,IAGnBH,EAAKV,6BAA6BiB,KAAKH,EAAiB,MAGtDtC,KAAKqB,cAAcc,SACtBnC,KAAKC,aAAeD,KAAKC,aAAasC,OAAO,SAAAC,GAAK,OAAAN,EAAKb,cAAcqB,SAASF,EAAEH,SAE7ErC,KAAKwB,6BAA6BW,OACrCnC,KAAK2C,gBAAkB3C,KAAKwB,6BAA6B,GAEzDxB,KAAK2C,gBAAkB3C,KAAKC,aAAa,IAIpCe,EAAAgB,UAAAY,oBAAP,eAGKxC,EAFJJ,KAAKW,MAAQX,KAAKuB,YAGlB,IACCnB,EAASJ,KAAKyB,UAAUf,MAAMV,KAAKuB,YAAavB,KAAK2C,gBAAgBN,KAAKQ,eACzE,MAAOhC,QAGLD,EAAcZ,KAAK2C,gBAAgBN,KAEvC,GAAIrC,KAAKsB,0BACRV,EAAcR,GAAUA,EAAO0C,iBAC5B9C,KAAK+C,kBAAkB3C,EAAO0C,iBAAkB1C,GAChDJ,KAAK2C,gBAAgBN,QACJrC,KAAK2C,gBAAgBN,KAAM,KACxCW,EAAahD,KAAKC,aAAagD,KAAK,SAAAT,GAAK,OAAAA,EAAEH,OAASzB,IACtDoC,IACHhD,KAAK2C,gBAAkBK,GAI1BpC,EAAcA,GAA4BZ,KAAK2C,gBAAgBN,KAE/DrC,KAAK6B,gBAAgB,CACpBzB,OAAQJ,KAAKW,MACbuC,oBAAqB9C,EAASJ,KAAKyB,UAAU0B,OAAO/C,EAAQgD,EAAAA,kBAAsBC,eAAiB,GACnGC,eAAgBlD,EAASJ,KAAKyB,UAAU0B,OAAO/C,EAAQgD,EAAAA,kBAAsBG,UAAY,GACzF3C,YAAaA,EAAYiC,iBAIpB7B,EAAAgB,UAAAwB,gBAAP,SAAuBC,EAAkBC,GAGxC,GAFA1D,KAAK2C,gBAAkBc,EAEO,EAA1BzD,KAAKuB,YAAYY,OAAY,CAChCnC,KAAKW,MAAQX,KAAKuB,gBAEdnB,OAAM,EACV,IACCA,EAASJ,KAAKyB,UAAUf,MAAMV,KAAKuB,YAAavB,KAAK2C,gBAAgBN,KAAKQ,eACzE,MAAOhC,IAGTb,KAAK6B,gBAAgB,CACpBzB,OAAQJ,KAAKW,MACbuC,oBAAqB9C,EAASJ,KAAKyB,UAAU0B,OAAO/C,EAAQgD,EAAAA,kBAAsBC,eAAiB,GACnGC,eAAgBlD,EAASJ,KAAKyB,UAAU0B,OAAO/C,EAAQgD,EAAAA,kBAAsBG,UAAY,GACzF3C,YAAaZ,KAAK2C,gBAAgBN,KAAKQ,gBAIzCa,EAAGC,SAGG3C,EAAAgB,UAAA4B,gBAAP,SAAuBC,OAEhBC,EAAYC,OAAOC,aAAaH,EAAMI,UAD5B,cAEHC,KAAKJ,IACjBD,EAAMM,kBAIEnD,EAAAgB,UAAAD,iBAAV,WAAA,IAAAG,EAAAlC,KACCA,KAAKiB,gBAAgBhB,aAAamC,QAAQ,SAAAI,OACnCiB,EAAmB,CACxBW,KAAM5B,EAAE,GAAG6B,WACXhC,KAAMG,EAAE,GAAG6B,WACXC,SAAU9B,EAAE,GAAG6B,WACfE,UAAW/B,EAAE,IAAM,EACnBgC,UAAWhC,EAAE,IAAkBiC,UAC/BC,UAAWlC,EAAE,GAAG6B,WAAWM,oBAC3BC,YAAa,IAGV1C,EAAKf,oBACRsC,EAAQmB,YAAc1C,EAAK2C,0BAA0BpB,EAAQpB,KAAKQ,gBAGnEX,EAAKjC,aAAawC,KAAKgB,MAIfzC,EAAAgB,UAAA6C,0BAAV,SAAoCjE,GACnC,IACC,OAAOZ,KAAKyB,UAAU0B,OAAOnD,KAAKyB,UAAUqD,iBAAiBlE,GAAcwC,EAAAA,kBAAsBC,eAChG,MAAOxC,GACR,OAAOA,IAITG,EAAAgB,UAAA+C,iBAAA,SAAiBC,GAChBhF,KAAK6B,gBAAkBmD,GAGxBhE,EAAAgB,UAAAiD,kBAAA,SAAkBD,GACjBhF,KAAK4B,UAAYoD,GAGlBhE,EAAAgB,UAAAkD,iBAAA,SAAiBC,GAChBnF,KAAK0B,SAAWyD,GAGjBnE,EAAAgB,UAAAoD,WAAA,SAAWC,GAAX,IAAAnD,EAAAlC,KACKqF,IACHrF,KAAKuB,YAAc8D,EACnBC,WAAW,WACVpD,EAAKU,uBACH,KAIG5B,EAAAgB,UAAAe,kBAAR,SAA0BnC,EAAqBR,OAExCmF,EAAYnF,EAAOoF,QAAQ,GAAKnB,WAEhCoB,EAAYzF,KAAKC,aAAasC,OAAO,SAAAC,GAAK,OAAAA,EAAE8B,WAAa1D,EAAYyD,aAErEqB,EAAcD,EAAUxC,KAAK,SAAAT,GAAK,OAAAA,EAAEgC,YAAcC,YAElDkB,EAAqBF,EAAUlD,OAAO,SAAAC,GAAK,OAAAA,EAAEgC,YAAcC,YAC7DmB,EAAiBF,EAAcA,EAAYrD,KAAOoC,UActD,OARAkB,EAAmBvD,QAAQ,SAAAqB,GAC1BA,EAAQe,UAAUpC,QAAQ,SAAAyD,GACrBN,EAAUO,WAAWD,KACxBD,EAAiBnC,EAAQpB,UAKrBuD,uBAzMRG,EAAAA,UAASlG,KAAA,CAAC,CACVmG,SAAU,qBACVC,SAAA,2+CAEAC,UAAW,CACVnG,EACA,CACCoG,QAASC,EAAAA,kBAETC,YAAaC,EAAAA,WAAW,WAAM,OAAAtF,IAC9BuF,OAAO,GAER,CACCJ,QAASK,EAAAA,cACTC,SAAQ1F,EACRwF,OAAO,+SApBDxG,oCA0BP2G,EAAAA,kCACAA,EAAAA,iCACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,uCACAA,EAAAA,SAkLF1F,EA5MA,GCPA2F,EAAA,WAOA,SAAAA,KAiBA,OANQA,EAAAC,QAAP,WACC,MAAO,CACNC,SAAUF,EACVT,UAAW,CAACvG,yBAddmH,EAAAA,SAAQjH,KAAA,CAAC,CACTkH,aAAc,CAAC/F,GACfgG,QAAS,CACRC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,iBAAiBR,WAElBS,QAAS,CAACrG,OASX2F,EAxBA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class NgxIntlTelInputService {\n\n\tconstructor() { }\n}\n","export class CountryCode {\n\tpublic allCountries = [\n\t\t[\n\t\t\t'Afghanistan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂºÃÂ§ÃÂÃÂ³ÃÂªÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'af',\n\t\t\t'93'\n\t\t],\n\t\t[\n\t\t\t'Albania (ShqipÃÂ«ri)',\n\t\t\t'al',\n\t\t\t'355'\n\t\t],\n\t\t[\n\t\t\t'Algeria (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¬ÃÂ²ÃÂ§ÃÂ¦ÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'dz',\n\t\t\t'213'\n\t\t],\n\t\t[\n\t\t\t'American Samoa',\n\t\t\t'as',\n\t\t\t'1684'\n\t\t],\n\t\t[\n\t\t\t'Andorra',\n\t\t\t'ad',\n\t\t\t'376'\n\t\t],\n\t\t[\n\t\t\t'Angola',\n\t\t\t'ao',\n\t\t\t'244'\n\t\t],\n\t\t[\n\t\t\t'Anguilla',\n\t\t\t'ai',\n\t\t\t'1264'\n\t\t],\n\t\t[\n\t\t\t'Antigua and Barbuda',\n\t\t\t'ag',\n\t\t\t'1268'\n\t\t],\n\t\t[\n\t\t\t'Argentina',\n\t\t\t'ar',\n\t\t\t'54'\n\t\t],\n\t\t[\n\t\t\t'Armenia (ÃÂÃÂ¡ÃÂµÃÂ¡ÃÂ½ÃÂ¿ÃÂ¡ÃÂ¶)',\n\t\t\t'am',\n\t\t\t'374'\n\t\t],\n\t\t[\n\t\t\t'Aruba',\n\t\t\t'aw',\n\t\t\t'297'\n\t\t],\n\t\t[\n\t\t\t'Australia',\n\t\t\t'au',\n\t\t\t'61',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Austria (ÃÂsterreich)',\n\t\t\t'at',\n\t\t\t'43'\n\t\t],\n\t\t[\n\t\t\t'Azerbaijan (AzÃÂrbaycan)',\n\t\t\t'az',\n\t\t\t'994'\n\t\t],\n\t\t[\n\t\t\t'Bahamas',\n\t\t\t'bs',\n\t\t\t'1242'\n\t\t],\n\t\t[\n\t\t\t'Bahrain (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¨ÃÂ­ÃÂ±ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'bh',\n\t\t\t'973'\n\t\t],\n\t\t[\n\t\t\t'Bangladesh (Ã Â¦Â¬Ã Â¦Â¾Ã Â¦ÂÃ Â¦Â²Ã Â¦Â¾Ã Â¦Â¦Ã Â§ÂÃ Â¦Â¶)',\n\t\t\t'bd',\n\t\t\t'880'\n\t\t],\n\t\t[\n\t\t\t'Barbados',\n\t\t\t'bb',\n\t\t\t'1246'\n\t\t],\n\t\t[\n\t\t\t'Belarus (ÃÂÃÂµÃÂ»ÃÂ°ÃÂÃÂÃÂÃÂ)',\n\t\t\t'by',\n\t\t\t'375'\n\t\t],\n\t\t[\n\t\t\t'Belgium (BelgiÃÂ«)',\n\t\t\t'be',\n\t\t\t'32'\n\t\t],\n\t\t[\n\t\t\t'Belize',\n\t\t\t'bz',\n\t\t\t'501'\n\t\t],\n\t\t[\n\t\t\t'Benin (BÃÂ©nin)',\n\t\t\t'bj',\n\t\t\t'229'\n\t\t],\n\t\t[\n\t\t\t'Bermuda',\n\t\t\t'bm',\n\t\t\t'1441'\n\t\t],\n\t\t[\n\t\t\t'Bhutan (Ã Â½Â Ã Â½ÂÃ Â¾Â²Ã Â½Â´Ã Â½Â)',\n\t\t\t'bt',\n\t\t\t'975'\n\t\t],\n\t\t[\n\t\t\t'Bolivia',\n\t\t\t'bo',\n\t\t\t'591'\n\t\t],\n\t\t[\n\t\t\t'Bosnia and Herzegovina (ÃÂÃÂ¾ÃÂÃÂ½ÃÂ° ÃÂ¸ ÃÂ¥ÃÂµÃÂÃÂÃÂµÃÂ³ÃÂ¾ÃÂ²ÃÂ¸ÃÂ½ÃÂ°)',\n\t\t\t'ba',\n\t\t\t'387'\n\t\t],\n\t\t[\n\t\t\t'Botswana',\n\t\t\t'bw',\n\t\t\t'267'\n\t\t],\n\t\t[\n\t\t\t'Brazil (Brasil)',\n\t\t\t'br',\n\t\t\t'55'\n\t\t],\n\t\t[\n\t\t\t'British Indian Ocean Territory',\n\t\t\t'io',\n\t\t\t'246'\n\t\t],\n\t\t[\n\t\t\t'British Virgin Islands',\n\t\t\t'vg',\n\t\t\t'1284'\n\t\t],\n\t\t[\n\t\t\t'Brunei',\n\t\t\t'bn',\n\t\t\t'673'\n\t\t],\n\t\t[\n\t\t\t'Bulgaria (ÃÂÃÂÃÂ»ÃÂ³ÃÂ°ÃÂÃÂ¸ÃÂ)',\n\t\t\t'bg',\n\t\t\t'359'\n\t\t],\n\t\t[\n\t\t\t'Burkina Faso',\n\t\t\t'bf',\n\t\t\t'226'\n\t\t],\n\t\t[\n\t\t\t'Burundi (Uburundi)',\n\t\t\t'bi',\n\t\t\t'257'\n\t\t],\n\t\t[\n\t\t\t'Cambodia (Ã¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂ»Ã¡ÂÂÃ¡ÂÂ¶)',\n\t\t\t'kh',\n\t\t\t'855'\n\t\t],\n\t\t[\n\t\t\t'Cameroon (Cameroun)',\n\t\t\t'cm',\n\t\t\t'237'\n\t\t],\n\t\t[\n\t\t\t'Canada',\n\t\t\t'ca',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',\n\t\t\t\t'418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',\n\t\t\t\t'604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',\n\t\t\t\t'819', '825', '867', '873', '902', '905'\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Cape Verde (Kabu Verdi)',\n\t\t\t'cv',\n\t\t\t'238'\n\t\t],\n\t\t[\n\t\t\t'Caribbean Netherlands',\n\t\t\t'bq',\n\t\t\t'599',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Cayman Islands',\n\t\t\t'ky',\n\t\t\t'1345'\n\t\t],\n\t\t[\n\t\t\t'Central African Republic (RÃÂ©publique centrafricaine)',\n\t\t\t'cf',\n\t\t\t'236'\n\t\t],\n\t\t[\n\t\t\t'Chad (Tchad)',\n\t\t\t'td',\n\t\t\t'235'\n\t\t],\n\t\t[\n\t\t\t'Chile',\n\t\t\t'cl',\n\t\t\t'56'\n\t\t],\n\t\t[\n\t\t\t'China (Ã¤Â¸Â­Ã¥ÂÂ½)',\n\t\t\t'cn',\n\t\t\t'86'\n\t\t],\n\t\t[\n\t\t\t'Christmas Island',\n\t\t\t'cx',\n\t\t\t'61',\n\t\t\t2\n\t\t],\n\t\t[\n\t\t\t'Cocos (Keeling) Islands',\n\t\t\t'cc',\n\t\t\t'61',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Colombia',\n\t\t\t'co',\n\t\t\t'57'\n\t\t],\n\t\t[\n\t\t\t'Comoros (Ã¢ÂÂ«ÃÂ¬ÃÂ²ÃÂ± ÃÂ§ÃÂÃÂÃÂÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'km',\n\t\t\t'269'\n\t\t],\n\t\t[\n\t\t\t'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',\n\t\t\t'cd',\n\t\t\t'243'\n\t\t],\n\t\t[\n\t\t\t'Congo (Republic) (Congo-Brazzaville)',\n\t\t\t'cg',\n\t\t\t'242'\n\t\t],\n\t\t[\n\t\t\t'Cook Islands',\n\t\t\t'ck',\n\t\t\t'682'\n\t\t],\n\t\t[\n\t\t\t'Costa Rica',\n\t\t\t'cr',\n\t\t\t'506'\n\t\t],\n\t\t[\n\t\t\t'CÃÂ´te dÃ¢ÂÂIvoire',\n\t\t\t'ci',\n\t\t\t'225'\n\t\t],\n\t\t[\n\t\t\t'Croatia (Hrvatska)',\n\t\t\t'hr',\n\t\t\t'385'\n\t\t],\n\t\t[\n\t\t\t'Cuba',\n\t\t\t'cu',\n\t\t\t'53'\n\t\t],\n\t\t[\n\t\t\t'CuraÃÂ§ao',\n\t\t\t'cw',\n\t\t\t'599',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Cyprus (ÃÂÃÂÃÂÃÂÃÂ¿ÃÂ)',\n\t\t\t'cy',\n\t\t\t'357'\n\t\t],\n\t\t[\n\t\t\t'Czech Republic (ÃÂeskÃÂ¡ republika)',\n\t\t\t'cz',\n\t\t\t'420'\n\t\t],\n\t\t[\n\t\t\t'Denmark (Danmark)',\n\t\t\t'dk',\n\t\t\t'45'\n\t\t],\n\t\t[\n\t\t\t'Djibouti',\n\t\t\t'dj',\n\t\t\t'253'\n\t\t],\n\t\t[\n\t\t\t'Dominica',\n\t\t\t'dm',\n\t\t\t'1767'\n\t\t],\n\t\t[\n\t\t\t'Dominican Republic (RepÃÂºblica Dominicana)',\n\t\t\t'do',\n\t\t\t'1',\n\t\t\t2,\n\t\t\t['809', '829', '849']\n\t\t],\n\t\t[\n\t\t\t'Ecuador',\n\t\t\t'ec',\n\t\t\t'593'\n\t\t],\n\t\t[\n\t\t\t'Egypt (Ã¢ÂÂ«ÃÂÃÂµÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'eg',\n\t\t\t'20'\n\t\t],\n\t\t[\n\t\t\t'El Salvador',\n\t\t\t'sv',\n\t\t\t'503'\n\t\t],\n\t\t[\n\t\t\t'Equatorial Guinea (Guinea Ecuatorial)',\n\t\t\t'gq',\n\t\t\t'240'\n\t\t],\n\t\t[\n\t\t\t'Eritrea',\n\t\t\t'er',\n\t\t\t'291'\n\t\t],\n\t\t[\n\t\t\t'Estonia (Eesti)',\n\t\t\t'ee',\n\t\t\t'372'\n\t\t],\n\t\t[\n\t\t\t'Ethiopia',\n\t\t\t'et',\n\t\t\t'251'\n\t\t],\n\t\t[\n\t\t\t'Falkland Islands (Islas Malvinas)',\n\t\t\t'fk',\n\t\t\t'500'\n\t\t],\n\t\t[\n\t\t\t'Faroe Islands (FÃÂ¸royar)',\n\t\t\t'fo',\n\t\t\t'298'\n\t\t],\n\t\t[\n\t\t\t'Fiji',\n\t\t\t'fj',\n\t\t\t'679'\n\t\t],\n\t\t[\n\t\t\t'Finland (Suomi)',\n\t\t\t'fi',\n\t\t\t'358',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'France',\n\t\t\t'fr',\n\t\t\t'33'\n\t\t],\n\t\t[\n\t\t\t'French Guiana (Guyane franÃÂ§aise)',\n\t\t\t'gf',\n\t\t\t'594'\n\t\t],\n\t\t[\n\t\t\t'French Polynesia (PolynÃÂ©sie franÃÂ§aise)',\n\t\t\t'pf',\n\t\t\t'689'\n\t\t],\n\t\t[\n\t\t\t'Gabon',\n\t\t\t'ga',\n\t\t\t'241'\n\t\t],\n\t\t[\n\t\t\t'Gambia',\n\t\t\t'gm',\n\t\t\t'220'\n\t\t],\n\t\t[\n\t\t\t'Georgia (Ã¡ÂÂ¡Ã¡ÂÂÃ¡ÂÂ¥Ã¡ÂÂÃ¡ÂÂ Ã¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂ)',\n\t\t\t'ge',\n\t\t\t'995'\n\t\t],\n\t\t[\n\t\t\t'Germany (Deutschland)',\n\t\t\t'de',\n\t\t\t'49'\n\t\t],\n\t\t[\n\t\t\t'Ghana (Gaana)',\n\t\t\t'gh',\n\t\t\t'233'\n\t\t],\n\t\t[\n\t\t\t'Gibraltar',\n\t\t\t'gi',\n\t\t\t'350'\n\t\t],\n\t\t[\n\t\t\t'Greece (ÃÂÃÂ»ÃÂ»ÃÂ¬ÃÂ´ÃÂ±)',\n\t\t\t'gr',\n\t\t\t'30'\n\t\t],\n\t\t[\n\t\t\t'Greenland (Kalaallit Nunaat)',\n\t\t\t'gl',\n\t\t\t'299'\n\t\t],\n\t\t[\n\t\t\t'Grenada',\n\t\t\t'gd',\n\t\t\t'1473'\n\t\t],\n\t\t[\n\t\t\t'Guadeloupe',\n\t\t\t'gp',\n\t\t\t'590',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Guam',\n\t\t\t'gu',\n\t\t\t'1671'\n\t\t],\n\t\t[\n\t\t\t'Guatemala',\n\t\t\t'gt',\n\t\t\t'502'\n\t\t],\n\t\t[\n\t\t\t'Guernsey',\n\t\t\t'gg',\n\t\t\t'44',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Guinea (GuinÃÂ©e)',\n\t\t\t'gn',\n\t\t\t'224'\n\t\t],\n\t\t[\n\t\t\t'Guinea-Bissau (GuinÃÂ© Bissau)',\n\t\t\t'gw',\n\t\t\t'245'\n\t\t],\n\t\t[\n\t\t\t'Guyana',\n\t\t\t'gy',\n\t\t\t'592'\n\t\t],\n\t\t[\n\t\t\t'Haiti',\n\t\t\t'ht',\n\t\t\t'509'\n\t\t],\n\t\t[\n\t\t\t'Honduras',\n\t\t\t'hn',\n\t\t\t'504'\n\t\t],\n\t\t[\n\t\t\t'Hong Kong (Ã©Â¦ÂÃ¦Â¸Â¯)',\n\t\t\t'hk',\n\t\t\t'852'\n\t\t],\n\t\t[\n\t\t\t'Hungary (MagyarorszÃÂ¡g)',\n\t\t\t'hu',\n\t\t\t'36'\n\t\t],\n\t\t[\n\t\t\t'Iceland (ÃÂsland)',\n\t\t\t'is',\n\t\t\t'354'\n\t\t],\n\t\t[\n\t\t\t'India (Ã Â¤Â­Ã Â¤Â¾Ã Â¤Â°Ã Â¤Â¤)',\n\t\t\t'in',\n\t\t\t'91'\n\t\t],\n\t\t[\n\t\t\t'Indonesia',\n\t\t\t'id',\n\t\t\t'62'\n\t\t],\n\t\t[\n\t\t\t'Iran (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ±ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ir',\n\t\t\t'98'\n\t\t],\n\t\t[\n\t\t\t'Iraq (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'iq',\n\t\t\t'964'\n\t\t],\n\t\t[\n\t\t\t'Ireland',\n\t\t\t'ie',\n\t\t\t'353'\n\t\t],\n\t\t[\n\t\t\t'Isle of Man',\n\t\t\t'im',\n\t\t\t'44',\n\t\t\t2\n\t\t],\n\t\t[\n\t\t\t'Israel (Ã¢ÂÂ«ÃÂÃÂ©ÃÂ¨ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'il',\n\t\t\t'972'\n\t\t],\n\t\t[\n\t\t\t'Italy (Italia)',\n\t\t\t'it',\n\t\t\t'39',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Jamaica',\n\t\t\t'jm',\n\t\t\t'1876'\n\t\t],\n\t\t[\n\t\t\t'Japan (Ã¦ÂÂ¥Ã¦ÂÂ¬)',\n\t\t\t'jp',\n\t\t\t'81'\n\t\t],\n\t\t[\n\t\t\t'Jersey',\n\t\t\t'je',\n\t\t\t'44',\n\t\t\t3\n\t\t],\n\t\t[\n\t\t\t'Jordan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ£ÃÂ±ÃÂ¯ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'jo',\n\t\t\t'962'\n\t\t],\n\t\t[\n\t\t\t'Kazakhstan (ÃÂÃÂ°ÃÂ·ÃÂ°ÃÂÃÂÃÂÃÂ°ÃÂ½)',\n\t\t\t'kz',\n\t\t\t'7',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Kenya',\n\t\t\t'ke',\n\t\t\t'254'\n\t\t],\n\t\t[\n\t\t\t'Kiribati',\n\t\t\t'ki',\n\t\t\t'686'\n\t\t],\n\t\t[\n\t\t\t'Kosovo',\n\t\t\t'xk',\n\t\t\t'383'\n\t\t],\n\t\t[\n\t\t\t'Kuwait (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃÂªÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'kw',\n\t\t\t'965'\n\t\t],\n\t\t[\n\t\t\t'Kyrgyzstan (ÃÂÃÂÃÂÃÂ³ÃÂÃÂ·ÃÂÃÂÃÂ°ÃÂ½)',\n\t\t\t'kg',\n\t\t\t'996'\n\t\t],\n\t\t[\n\t\t\t'Laos (Ã ÂºÂ¥Ã ÂºÂ²Ã ÂºÂ§)',\n\t\t\t'la',\n\t\t\t'856'\n\t\t],\n\t\t[\n\t\t\t'Latvia (Latvija)',\n\t\t\t'lv',\n\t\t\t'371'\n\t\t],\n\t\t[\n\t\t\t'Lebanon (Ã¢ÂÂ«ÃÂÃÂ¨ÃÂÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'lb',\n\t\t\t'961'\n\t\t],\n\t\t[\n\t\t\t'Lesotho',\n\t\t\t'ls',\n\t\t\t'266'\n\t\t],\n\t\t[\n\t\t\t'Liberia',\n\t\t\t'lr',\n\t\t\t'231'\n\t\t],\n\t\t[\n\t\t\t'Libya (Ã¢ÂÂ«ÃÂÃÂÃÂ¨ÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ly',\n\t\t\t'218'\n\t\t],\n\t\t[\n\t\t\t'Liechtenstein',\n\t\t\t'li',\n\t\t\t'423'\n\t\t],\n\t\t[\n\t\t\t'Lithuania (Lietuva)',\n\t\t\t'lt',\n\t\t\t'370'\n\t\t],\n\t\t[\n\t\t\t'Luxembourg',\n\t\t\t'lu',\n\t\t\t'352'\n\t\t],\n\t\t[\n\t\t\t'Macau (Ã¦Â¾Â³Ã©ÂÂ)',\n\t\t\t'mo',\n\t\t\t'853'\n\t\t],\n\t\t[\n\t\t\t'Macedonia (FYROM) (ÃÂÃÂ°ÃÂºÃÂµÃÂ´ÃÂ¾ÃÂ½ÃÂ¸ÃÂÃÂ°)',\n\t\t\t'mk',\n\t\t\t'389'\n\t\t],\n\t\t[\n\t\t\t'Madagascar (Madagasikara)',\n\t\t\t'mg',\n\t\t\t'261'\n\t\t],\n\t\t[\n\t\t\t'Malawi',\n\t\t\t'mw',\n\t\t\t'265'\n\t\t],\n\t\t[\n\t\t\t'Malaysia',\n\t\t\t'my',\n\t\t\t'60'\n\t\t],\n\t\t[\n\t\t\t'Maldives',\n\t\t\t'mv',\n\t\t\t'960'\n\t\t],\n\t\t[\n\t\t\t'Mali',\n\t\t\t'ml',\n\t\t\t'223'\n\t\t],\n\t\t[\n\t\t\t'Malta',\n\t\t\t'mt',\n\t\t\t'356'\n\t\t],\n\t\t[\n\t\t\t'Marshall Islands',\n\t\t\t'mh',\n\t\t\t'692'\n\t\t],\n\t\t[\n\t\t\t'Martinique',\n\t\t\t'mq',\n\t\t\t'596'\n\t\t],\n\t\t[\n\t\t\t'Mauritania (Ã¢ÂÂ«ÃÂÃÂÃÂ±ÃÂÃÂªÃÂ§ÃÂÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'mr',\n\t\t\t'222'\n\t\t],\n\t\t[\n\t\t\t'Mauritius (Moris)',\n\t\t\t'mu',\n\t\t\t'230'\n\t\t],\n\t\t[\n\t\t\t'Mayotte',\n\t\t\t'yt',\n\t\t\t'262',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Mexico (MÃÂ©xico)',\n\t\t\t'mx',\n\t\t\t'52'\n\t\t],\n\t\t[\n\t\t\t'Micronesia',\n\t\t\t'fm',\n\t\t\t'691'\n\t\t],\n\t\t[\n\t\t\t'Moldova (Republica Moldova)',\n\t\t\t'md',\n\t\t\t'373'\n\t\t],\n\t\t[\n\t\t\t'Monaco',\n\t\t\t'mc',\n\t\t\t'377'\n\t\t],\n\t\t[\n\t\t\t'Mongolia (ÃÂÃÂ¾ÃÂ½ÃÂ³ÃÂ¾ÃÂ»)',\n\t\t\t'mn',\n\t\t\t'976'\n\t\t],\n\t\t[\n\t\t\t'Montenegro (Crna Gora)',\n\t\t\t'me',\n\t\t\t'382'\n\t\t],\n\t\t[\n\t\t\t'Montserrat',\n\t\t\t'ms',\n\t\t\t'1664'\n\t\t],\n\t\t[\n\t\t\t'Morocco (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂºÃÂ±ÃÂ¨Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ma',\n\t\t\t'212',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Mozambique (MoÃÂ§ambique)',\n\t\t\t'mz',\n\t\t\t'258'\n\t\t],\n\t\t[\n\t\t\t'Myanmar (Burma) (Ã¡ÂÂÃ¡ÂÂ¼Ã¡ÂÂÃ¡ÂÂºÃ¡ÂÂÃ¡ÂÂ¬)',\n\t\t\t'mm',\n\t\t\t'95'\n\t\t],\n\t\t[\n\t\t\t'Namibia (NamibiÃÂ«)',\n\t\t\t'na',\n\t\t\t'264'\n\t\t],\n\t\t[\n\t\t\t'Nauru',\n\t\t\t'nr',\n\t\t\t'674'\n\t\t],\n\t\t[\n\t\t\t'Nepal (Ã Â¤Â¨Ã Â¥ÂÃ Â¤ÂªÃ Â¤Â¾Ã Â¤Â²)',\n\t\t\t'np',\n\t\t\t'977'\n\t\t],\n\t\t[\n\t\t\t'Netherlands (Nederland)',\n\t\t\t'nl',\n\t\t\t'31'\n\t\t],\n\t\t[\n\t\t\t'New Caledonia (Nouvelle-CalÃÂ©donie)',\n\t\t\t'nc',\n\t\t\t'687'\n\t\t],\n\t\t[\n\t\t\t'New Zealand',\n\t\t\t'nz',\n\t\t\t'64'\n\t\t],\n\t\t[\n\t\t\t'Nicaragua',\n\t\t\t'ni',\n\t\t\t'505'\n\t\t],\n\t\t[\n\t\t\t'Niger (Nijar)',\n\t\t\t'ne',\n\t\t\t'227'\n\t\t],\n\t\t[\n\t\t\t'Nigeria',\n\t\t\t'ng',\n\t\t\t'234'\n\t\t],\n\t\t[\n\t\t\t'Niue',\n\t\t\t'nu',\n\t\t\t'683'\n\t\t],\n\t\t[\n\t\t\t'Norfolk Island',\n\t\t\t'nf',\n\t\t\t'672'\n\t\t],\n\t\t[\n\t\t\t'North Korea (Ã¬Â¡Â°Ã¬ÂÂ  Ã«Â¯Â¼Ã¬Â£Â¼Ã¬Â£Â¼Ã¬ÂÂ Ã¬ÂÂ¸Ã«Â¯Â¼ ÃªÂ³ÂµÃ­ÂÂÃªÂµÂ­)',\n\t\t\t'kp',\n\t\t\t'850'\n\t\t],\n\t\t[\n\t\t\t'Northern Mariana Islands',\n\t\t\t'mp',\n\t\t\t'1670'\n\t\t],\n\t\t[\n\t\t\t'Norway (Norge)',\n\t\t\t'no',\n\t\t\t'47',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Oman (Ã¢ÂÂ«ÃÂ¹ÃÂÃÂÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'om',\n\t\t\t'968'\n\t\t],\n\t\t[\n\t\t\t'Pakistan (Ã¢ÂÂ«ÃÂ¾ÃÂ§ÃÂ©ÃÂ³ÃÂªÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'pk',\n\t\t\t'92'\n\t\t],\n\t\t[\n\t\t\t'Palau',\n\t\t\t'pw',\n\t\t\t'680'\n\t\t],\n\t\t[\n\t\t\t'Palestine (Ã¢ÂÂ«ÃÂÃÂÃÂ³ÃÂ·ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ps',\n\t\t\t'970'\n\t\t],\n\t\t[\n\t\t\t'Panama (PanamÃÂ¡)',\n\t\t\t'pa',\n\t\t\t'507'\n\t\t],\n\t\t[\n\t\t\t'Papua New Guinea',\n\t\t\t'pg',\n\t\t\t'675'\n\t\t],\n\t\t[\n\t\t\t'Paraguay',\n\t\t\t'py',\n\t\t\t'595'\n\t\t],\n\t\t[\n\t\t\t'Peru (PerÃÂº)',\n\t\t\t'pe',\n\t\t\t'51'\n\t\t],\n\t\t[\n\t\t\t'Philippines',\n\t\t\t'ph',\n\t\t\t'63'\n\t\t],\n\t\t[\n\t\t\t'Poland (Polska)',\n\t\t\t'pl',\n\t\t\t'48'\n\t\t],\n\t\t[\n\t\t\t'Portugal',\n\t\t\t'pt',\n\t\t\t'351'\n\t\t],\n\t\t[\n\t\t\t'Puerto Rico',\n\t\t\t'pr',\n\t\t\t'1',\n\t\t\t3,\n\t\t\t['787', '939']\n\t\t],\n\t\t[\n\t\t\t'Qatar (Ã¢ÂÂ«ÃÂÃÂ·ÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'qa',\n\t\t\t'974'\n\t\t],\n\t\t[\n\t\t\t'RÃÂ©union (La RÃÂ©union)',\n\t\t\t're',\n\t\t\t'262',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Romania (RomÃÂ¢nia)',\n\t\t\t'ro',\n\t\t\t'40'\n\t\t],\n\t\t[\n\t\t\t'Russia (ÃÂ ÃÂ¾ÃÂÃÂÃÂ¸ÃÂ)',\n\t\t\t'ru',\n\t\t\t'7',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Rwanda',\n\t\t\t'rw',\n\t\t\t'250'\n\t\t],\n\t\t[\n\t\t\t'Saint BarthÃÂ©lemy (Saint-BarthÃÂ©lemy)',\n\t\t\t'bl',\n\t\t\t'590',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Saint Helena',\n\t\t\t'sh',\n\t\t\t'290'\n\t\t],\n\t\t[\n\t\t\t'Saint Kitts and Nevis',\n\t\t\t'kn',\n\t\t\t'1869'\n\t\t],\n\t\t[\n\t\t\t'Saint Lucia',\n\t\t\t'lc',\n\t\t\t'1758'\n\t\t],\n\t\t[\n\t\t\t'Saint Martin (Saint-Martin (partie franÃÂ§aise))',\n\t\t\t'mf',\n\t\t\t'590',\n\t\t\t2\n\t\t],\n\t\t[\n\t\t\t'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',\n\t\t\t'pm',\n\t\t\t'508'\n\t\t],\n\t\t[\n\t\t\t'Saint Vincent and the Grenadines',\n\t\t\t'vc',\n\t\t\t'1784'\n\t\t],\n\t\t[\n\t\t\t'Samoa',\n\t\t\t'ws',\n\t\t\t'685'\n\t\t],\n\t\t[\n\t\t\t'San Marino',\n\t\t\t'sm',\n\t\t\t'378'\n\t\t],\n\t\t[\n\t\t\t'SÃÂ£o TomÃÂ© and PrÃÂ­ncipe (SÃÂ£o TomÃÂ© e PrÃÂ­ncipe)',\n\t\t\t'st',\n\t\t\t'239'\n\t\t],\n\t\t[\n\t\t\t'Saudi Arabia (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃÂÃÂ© ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ¨ÃÂÃÂ© ÃÂ§ÃÂÃÂ³ÃÂ¹ÃÂÃÂ¯ÃÂÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'sa',\n\t\t\t'966'\n\t\t],\n\t\t[\n\t\t\t'Senegal (SÃÂ©nÃÂ©gal)',\n\t\t\t'sn',\n\t\t\t'221'\n\t\t],\n\t\t[\n\t\t\t'Serbia (ÃÂ¡ÃÂÃÂ±ÃÂ¸ÃÂÃÂ°)',\n\t\t\t'rs',\n\t\t\t'381'\n\t\t],\n\t\t[\n\t\t\t'Seychelles',\n\t\t\t'sc',\n\t\t\t'248'\n\t\t],\n\t\t[\n\t\t\t'Sierra Leone',\n\t\t\t'sl',\n\t\t\t'232'\n\t\t],\n\t\t[\n\t\t\t'Singapore',\n\t\t\t'sg',\n\t\t\t'65'\n\t\t],\n\t\t[\n\t\t\t'Sint Maarten',\n\t\t\t'sx',\n\t\t\t'1721'\n\t\t],\n\t\t[\n\t\t\t'Slovakia (Slovensko)',\n\t\t\t'sk',\n\t\t\t'421'\n\t\t],\n\t\t[\n\t\t\t'Slovenia (Slovenija)',\n\t\t\t'si',\n\t\t\t'386'\n\t\t],\n\t\t[\n\t\t\t'Solomon Islands',\n\t\t\t'sb',\n\t\t\t'677'\n\t\t],\n\t\t[\n\t\t\t'Somalia (Soomaaliya)',\n\t\t\t'so',\n\t\t\t'252'\n\t\t],\n\t\t[\n\t\t\t'South Africa',\n\t\t\t'za',\n\t\t\t'27'\n\t\t],\n\t\t[\n\t\t\t'South Korea (Ã«ÂÂÃ­ÂÂÃ«Â¯Â¼ÃªÂµÂ­)',\n\t\t\t'kr',\n\t\t\t'82'\n\t\t],\n\t\t[\n\t\t\t'South Sudan (Ã¢ÂÂ«ÃÂ¬ÃÂÃÂÃÂ¨ ÃÂ§ÃÂÃÂ³ÃÂÃÂ¯ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ss',\n\t\t\t'211'\n\t\t],\n\t\t[\n\t\t\t'Spain (EspaÃÂ±a)',\n\t\t\t'es',\n\t\t\t'34'\n\t\t],\n\t\t[\n\t\t\t'Sri Lanka (Ã Â·ÂÃ Â·ÂÃ¢ÂÂÃ Â¶Â»Ã Â·Â Ã Â¶Â½Ã Â¶ÂÃ Â¶ÂÃ Â·ÂÃ Â·Â)',\n\t\t\t'lk',\n\t\t\t'94'\n\t\t],\n\t\t[\n\t\t\t'Sudan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ³ÃÂÃÂ¯ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'sd',\n\t\t\t'249'\n\t\t],\n\t\t[\n\t\t\t'Suriname',\n\t\t\t'sr',\n\t\t\t'597'\n\t\t],\n\t\t[\n\t\t\t'Svalbard and Jan Mayen',\n\t\t\t'sj',\n\t\t\t'47',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Swaziland',\n\t\t\t'sz',\n\t\t\t'268'\n\t\t],\n\t\t[\n\t\t\t'Sweden (Sverige)',\n\t\t\t'se',\n\t\t\t'46'\n\t\t],\n\t\t[\n\t\t\t'Switzerland (Schweiz)',\n\t\t\t'ch',\n\t\t\t'41'\n\t\t],\n\t\t[\n\t\t\t'Syria (Ã¢ÂÂ«ÃÂ³ÃÂÃÂ±ÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'sy',\n\t\t\t'963'\n\t\t],\n\t\t[\n\t\t\t'Taiwan (Ã¥ÂÂ°Ã§ÂÂ£)',\n\t\t\t'tw',\n\t\t\t'886'\n\t\t],\n\t\t[\n\t\t\t'Tajikistan',\n\t\t\t'tj',\n\t\t\t'992'\n\t\t],\n\t\t[\n\t\t\t'Tanzania',\n\t\t\t'tz',\n\t\t\t'255'\n\t\t],\n\t\t[\n\t\t\t'Thailand (Ã Â¹ÂÃ Â¸ÂÃ Â¸Â¢)',\n\t\t\t'th',\n\t\t\t'66'\n\t\t],\n\t\t[\n\t\t\t'Timor-Leste',\n\t\t\t'tl',\n\t\t\t'670'\n\t\t],\n\t\t[\n\t\t\t'Togo',\n\t\t\t'tg',\n\t\t\t'228'\n\t\t],\n\t\t[\n\t\t\t'Tokelau',\n\t\t\t'tk',\n\t\t\t'690'\n\t\t],\n\t\t[\n\t\t\t'Tonga',\n\t\t\t'to',\n\t\t\t'676'\n\t\t],\n\t\t[\n\t\t\t'Trinidad and Tobago',\n\t\t\t'tt',\n\t\t\t'1868'\n\t\t],\n\t\t[\n\t\t\t'Tunisia (Ã¢ÂÂ«ÃÂªÃÂÃÂÃÂ³Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'tn',\n\t\t\t'216'\n\t\t],\n\t\t[\n\t\t\t'Turkey (TÃÂ¼rkiye)',\n\t\t\t'tr',\n\t\t\t'90'\n\t\t],\n\t\t[\n\t\t\t'Turkmenistan',\n\t\t\t'tm',\n\t\t\t'993'\n\t\t],\n\t\t[\n\t\t\t'Turks and Caicos Islands',\n\t\t\t'tc',\n\t\t\t'1649'\n\t\t],\n\t\t[\n\t\t\t'Tuvalu',\n\t\t\t'tv',\n\t\t\t'688'\n\t\t],\n\t\t[\n\t\t\t'U.S. Virgin Islands',\n\t\t\t'vi',\n\t\t\t'1340'\n\t\t],\n\t\t[\n\t\t\t'Uganda',\n\t\t\t'ug',\n\t\t\t'256'\n\t\t],\n\t\t[\n\t\t\t'Ukraine (ÃÂ£ÃÂºÃÂÃÂ°ÃÂÃÂ½ÃÂ°)',\n\t\t\t'ua',\n\t\t\t'380'\n\t\t],\n\t\t[\n\t\t\t'United Arab Emirates (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¥ÃÂÃÂ§ÃÂ±ÃÂ§ÃÂª ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ¨ÃÂÃÂ© ÃÂ§ÃÂÃÂÃÂªÃÂ­ÃÂ¯ÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ae',\n\t\t\t'971'\n\t\t],\n\t\t[\n\t\t\t'United Kingdom',\n\t\t\t'gb',\n\t\t\t'44',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'United States',\n\t\t\t'us',\n\t\t\t'1',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Uruguay',\n\t\t\t'uy',\n\t\t\t'598'\n\t\t],\n\t\t[\n\t\t\t'Uzbekistan (OÃÂ»zbekiston)',\n\t\t\t'uz',\n\t\t\t'998'\n\t\t],\n\t\t[\n\t\t\t'Vanuatu',\n\t\t\t'vu',\n\t\t\t'678'\n\t\t],\n\t\t[\n\t\t\t'Vatican City (CittÃÂ  del Vaticano)',\n\t\t\t'va',\n\t\t\t'39',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Venezuela',\n\t\t\t've',\n\t\t\t'58'\n\t\t],\n\t\t[\n\t\t\t'Vietnam (ViÃ¡Â»Ât Nam)',\n\t\t\t'vn',\n\t\t\t'84'\n\t\t],\n\t\t[\n\t\t\t'Wallis and Futuna',\n\t\t\t'wf',\n\t\t\t'681'\n\t\t],\n\t\t[\n\t\t\t'Western Sahara (Ã¢ÂÂ«ÃÂ§ÃÂÃÂµÃÂ­ÃÂ±ÃÂ§ÃÂ¡ ÃÂ§ÃÂÃÂºÃÂ±ÃÂ¨ÃÂÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'eh',\n\t\t\t'212',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Yemen (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\n\t\t\t'ye',\n\t\t\t'967'\n\t\t],\n\t\t[\n\t\t\t'Zambia',\n\t\t\t'zm',\n\t\t\t'260'\n\t\t],\n\t\t[\n\t\t\t'Zimbabwe',\n\t\t\t'zw',\n\t\t\t'263'\n\t\t],\n\t\t[\n\t\t\t'ÃÂland Islands',\n\t\t\t'ax',\n\t\t\t'358',\n\t\t\t1\n\t\t]\n\t];\n}\n","import { FormControl } from '@angular/forms';\nimport * as lpn from 'google-libphonenumber';\n\nexport const phoneNumberValidator = (control: FormControl) => {\n\tconst error = { validatePhoneNumber: { valid: false } };\n\n\tlet number: lpn.PhoneNumber;\n\ttry {\n\t\tnumber = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\n\t} catch (e) {\n\t\treturn error;\n\t}\n\n\tif (!number) {\n\t\treturn error;\n\t} else {\n\t\tif (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\treturn;\n};\n","import { Component, OnInit, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\nimport { CountryCode } from './data/country-code';\nimport { phoneNumberValidator } from './ngx-intl-tel-input.validator';\nimport { Country } from './model/country.model';\nimport * as lpn from 'google-libphonenumber';\n\n@Component({\n\tselector: 'ngx-intl-tel-input',\n\ttemplateUrl: './ngx-intl-tel-input.component.html',\n\tstyleUrls: ['./ngx-intl-tel-input.component.css'],\n\tproviders: [\n\t\tCountryCode,\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\t// tslint:disable-next-line:no-forward-ref\n\t\t\tuseExisting: forwardRef(() => NgxIntlTelInputComponent),\n\t\t\tmulti: true\n\t\t},\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseValue: phoneNumberValidator,\n\t\t\tmulti: true,\n\t\t}\n\t]\n})\nexport class NgxIntlTelInputComponent implements OnInit {\n\n\t@Input() value = '';\n\t@Input() preferredCountries: Array<string> = [];\n\t@Input() enablePlaceholder = true;\n\t@Input() cssClass = 'form-control';\n\t@Input() onlyCountries: Array<string> = [];\n\t@Input() enableAutoCountrySelect = false;\n\n\tphoneNumber = '';\n\tallCountries: Array<Country> = [];\n\tpreferredCountriesInDropDown: Array<Country> = [];\n\tselectedCountry: Country;\n\tphoneUtil = lpn.PhoneNumberUtil.getInstance();\n\tdisabled = false;\n\terrors: Array<any> = ['Phone number is required.'];\n\n\n\tonTouched = () => { };\n\tpropagateChange = (_: any) => { };\n\n\tconstructor(\n\t\tprivate countryCodeData: CountryCode\n\t) {\n\t\tthis.fetchCountryData();\n\t}\n\n\tngOnInit() {\n\t\tif (this.preferredCountries.length) {\n\t\t\tthis.preferredCountries.forEach(iso2 => {\n\t\t\t\tconst preferredCountry = this.allCountries.filter((c) => {\n\t\t\t\t\treturn c.iso2 === iso2;\n\t\t\t\t});\n\n\t\t\t\tthis.preferredCountriesInDropDown.push(preferredCountry[0]);\n\t\t\t});\n\t\t}\n\t\tif (this.onlyCountries.length) {\n\t\t\tthis.allCountries = this.allCountries.filter(c => this.onlyCountries.includes(c.iso2));\n\t\t}\n\t\tif (this.preferredCountriesInDropDown.length) {\n\t\t\tthis.selectedCountry = this.preferredCountriesInDropDown[0];\n\t\t} else {\n\t\t\tthis.selectedCountry = this.allCountries[0];\n\t\t}\n\t}\n\n\tpublic onPhoneNumberChange(): void {\n\t\tthis.value = this.phoneNumber;\n\n\t\tlet number: lpn.PhoneNumber;\n\t\ttry {\n\t\t\tnumber = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\n\t\t} catch (e) {\n\t\t}\n\n\t\tlet countryCode = this.selectedCountry.iso2;\n\t\t// auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\t\tif (this.enableAutoCountrySelect) {\n\t\t\tcountryCode = number && number.getCountryCode()\n\t\t\t\t? this.getCountryIsoCode(number.getCountryCode(), number)\n\t\t\t\t: this.selectedCountry.iso2;\n\t\t\tif (countryCode !== this.selectedCountry.iso2) {\n\t\t\t\tconst newCountry = this.allCountries.find(c => c.iso2 === countryCode);\n\t\t\t\tif (newCountry) {\n\t\t\t\t\tthis.selectedCountry = newCountry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcountryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n\n\t\tthis.propagateChange({\n\t\t\tnumber: this.value,\n\t\t\tinternationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : '',\n\t\t\tnationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n\t\t\tcountryCode: countryCode.toUpperCase()\n\t\t});\n\t}\n\n\tpublic onCountrySelect(country: Country, el): void {\n\t\tthis.selectedCountry = country;\n\n\t\tif (this.phoneNumber.length > 0) {\n\t\t\tthis.value = this.phoneNumber;\n\n\t\t\tlet number: lpn.PhoneNumber;\n\t\t\ttry {\n\t\t\t\tnumber = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\n\t\t\t} catch (e) {\n\t\t\t}\n\n\t\t\tthis.propagateChange({\n\t\t\t\tnumber: this.value,\n\t\t\t\tinternationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : '' ,\n\t\t\t\tnationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n\t\t\t\tcountryCode: this.selectedCountry.iso2.toUpperCase()\n\t\t\t});\n\t\t}\n\n\t\tel.focus();\n\t}\n\n\tpublic onInputKeyPress(event): void {\n\t\tconst pattern = /[0-9\\+\\-\\ ]/;\n\t\tconst inputChar = String.fromCharCode(event.charCode);\n\t\tif (!pattern.test(inputChar)) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tprotected fetchCountryData(): void {\n\t\tthis.countryCodeData.allCountries.forEach(c => {\n\t\t\tconst country: Country = {\n\t\t\t\tname: c[0].toString(),\n\t\t\t\tiso2: c[1].toString(),\n\t\t\t\tdialCode: c[2].toString(),\n\t\t\t\tpriority: +c[3] || 0,\n\t\t\t\tareaCodes: c[4] as string[] || undefined,\n\t\t\t\tflagClass: c[1].toString().toLocaleLowerCase(),\n\t\t\t\tplaceHolder: ''\n\t\t\t};\n\n\t\t\tif (this.enablePlaceholder) {\n\t\t\t\tcountry.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\n\t\t\t}\n\n\t\t\tthis.allCountries.push(country);\n\t\t});\n\t}\n\n\tprotected getPhoneNumberPlaceHolder(countryCode: string): string {\n\t\ttry {\n\t\t\treturn this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat.INTERNATIONAL);\n\t\t} catch (e) {\n\t\t\treturn e;\n\t\t}\n\t}\n\n\tregisterOnChange(fn: any): void {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\tsetDisabledState(isDisabled: boolean): void {\n\t\tthis.disabled = isDisabled;\n\t}\n\n\twriteValue(obj: any): void {\n\t\tif (obj) {\n\t\t\tthis.phoneNumber = obj;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.onPhoneNumberChange();\n\t\t\t}, 1);\n\t\t}\n\t}\n\n\tprivate getCountryIsoCode(countryCode: number, number: lpn.PhoneNumber): string | undefined {\n\t\t// Will use this to match area code from the first numbers\n\t\tconst rawNumber = number.values_['2'].toString();\n\t\t// List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n\t\tconst countries = this.allCountries.filter(c => c.dialCode === countryCode.toString());\n\t\t// Main country is the country, which has no areaCodes specified in country-code.ts file.\n\t\tconst mainCountry = countries.find(c => c.areaCodes === undefined);\n\t\t// Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n\t\tconst secondaryCountries = countries.filter(c => c.areaCodes !== undefined);\n\t\tlet matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n\n\t\t/*\n\t\t\tInterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n\t\t\tIf no matches found, fallback to the main country.\n\t\t*/\n\t\tsecondaryCountries.forEach(country => {\n\t\t\tcountry.areaCodes.forEach(areaCode => {\n\t\t\t\tif (rawNumber.startsWith(areaCode)) {\n\t\t\t\t\tmatchedCountry = country.iso2;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn matchedCountry;\n\t}\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxIntlTelInputComponent } from './ngx-intl-tel-input.component';\nimport { CommonModule } from '@angular/common';\nimport { BsDropdownModule } from 'ngx-bootstrap';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxIntlTelInputService } from './ngx-intl-tel-input.service';\n\n@NgModule({\n\tdeclarations: [NgxIntlTelInputComponent],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tBsDropdownModule.forRoot()\n\t],\n\texports: [NgxIntlTelInputComponent]\n})\nexport class NgxIntlTelInputModule {\n\tstatic forRoot(): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: NgxIntlTelInputModule,\n\t\t\tproviders: [NgxIntlTelInputService]\n\t\t};\n\t}\n}\n"]}